automaton_definition(contract, events) ::=

<<

IMPORTS {
	import contractModels.*;
	import exampleBoardingSystem.Passenger; 
}
  
GLOBAL{

VARIABLES{
	  Clock cl = new DynamicClock();
	  Contract co = <contract>; 
	  int timeout = co.timeout();
	  }

EVENTS{
    tick() = {cl@@}
    <events : { event |
    <event.agent>_<event.action>(<event.agent> agent) = {agent.<event.action>()\}
    }>
}

PROPERTY test{
	 STATES{
		BAD{bad}
		STARTING{starting}
	}
	TRANSITIONS{
	    <events : { event |
	    starting -> starting [<event.agent>_<event.action> \ !(co.step(new Event("<event.agent>", "<event.action>") instanceof FalseContract) \
	    	     		  co = co.step(new Event("<event.agent>", "<event.action>"));]
	    starting -> bad [<event.agent>_<event.action> \ co.step(new Event("<event.agent>", "<event.action>")) instanceof FalseContract \
	    	     	    	  co = new FalseContract();]
				  
	    }>
	    starting -> starting [tick \ !(co.timestep(timeout) instanceof 
	    	                  FalseContract) \ 
	    					  co = co.timestep(timeout);
	    					  timeout = co.timeout();
	    					  co.registerDynamically(timeout * 1000);
	    					  ]
	    starting -> bad [tick \ co.timestep(timeout) instanceof FalseContract \
	    				 co = new FalseContract();]
	    
	    	 				    
        }
}

}

>>